include ../../../../common.make

.PHONY: list clean
list:
	@$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' -e clean

clean:
	-rm $$(make list)
	-rm -rf *.dSYM

CFLAGS+= -g

CXXFLAGS+= -g
CXXFLAGS+= -std=c++11

LDFLAGS+= -lcurl

# multi_perform GET + retry
multi-app: multi-app.c
	$(CC) $(CFLAGS) -o$@ $< $(LDFLAGS) && ./$@ 2>/dev/null

# easy_perform GET + retry + setopt + getinfo
easy-get: easy-get.cpp
	$(CXX) $(CXXFLAGS) -o$@ $< $(LDFLAGS) && ./$@ 2>/dev/null

# multi socket: boost + libcurl 
asiohiper: asiohiper.cpp
	$(CXX) $(CXXFLAGS) -o$@ $< $(LDFLAGS) -lboost_system && ./$@ 2>/dev/null

http2-pushinmemory: http2-pushinmemory.c
	$(CC) $(CFLAGS) -o$@ $< $(LDFLAGS) && ./$@ 2>/dev/null

simplessl: simplessl.c
	$(CC) $(CFLAGS) -o$@ $< $(LDFLAGS) && ./$@ 2>/dev/null

# retry
usercertinmem: usercertinmem.c
	$(CC) $(CFLAGS) -o$@ $< $(LDFLAGS) -lcrypto -lssl && ./$@

cacertinmem: cacertinmem.c
	$(CC) $(CFLAGS) -o$@ $< $(LDFLAGS) -lcrypto -lssl && ./$@

curlx: curlx.c
	$(CC) $(CFLAGS) -o$@ $< $(LDFLAGS) -lcrypto -lssl
	key=test ./$@ -p12 psy.p12 -envpass key -verbose -accesstype AD_DVCS -mimetype application/dvcs -acceptmime application/dvcs -out response -connect https://www.ebay.com 

opensslthreadlock: opensslthreadlock.c
